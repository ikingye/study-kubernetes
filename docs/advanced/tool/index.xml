<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2.2 工具 on Kubernetes 学习笔记</title>
    <link>https://ikingye.github.io/study-kubernetes/docs/advanced/tool/</link>
    <description>Recent content in 2.2 工具 on Kubernetes 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://ikingye.github.io/study-kubernetes/docs/advanced/tool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubectl</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/advanced/tool/kubectl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/advanced/tool/kubectl/</guid>
      <description>Kubectl #  集群信息查询 #   kubectl cluster-info  node #   kubectl get nodes kubectl describe node   常用操作 #  设置 #  设置 role #  # 添加 kubectl label node ime-rd5-edge0-node2-kunlun kubernetes.io/role=master kubectl label node ime-rd5-edge0-node2-kunlun kubernetes.io/role=worker # 删除 kubectl label node ime-rd5-edge0-node2-kunlun kubernetes.io/role=worker # 重置 role kubectl label --overwrite nodes &amp;lt;your_node&amp;gt; kubernetes.io/role=&amp;lt;your_new_label&amp;gt; 获取 service ip, port #  kubectl get service/servicename -o jsonpath=&#39;{.</description>
    </item>
    
    <item>
      <title>Kustomize</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/advanced/tool/kustomize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/advanced/tool/kustomize/</guid>
      <description>Kustomize #  kubernetes-sigs/kustomize Customization of kubernetes YAML configurations
kustomize lets you customize raw, template-free YAML files for multiple purposes, leaving the original YAML untouched and usable as is.
一般应用都会存在多套部署环境：开发环境、测试环境、生产环境，多套环境意味着存在多套 K8S 应用资源 YAML。 而这么多套 YAML 之间只存在微小配置差异，比如镜像版本不同、Label 不同等，而这些不同环境下的 YAML 经常会因为人为疏忽导致配置错误。 再者，多套环境的 YAML 维护通常是通过把一个环境下的 YAML 拷贝出来然后对差异的地方进行修改。 一些类似 Helm 等应用管理工具需要额外学习 DSL 语法。
总结以上，在 k8s 环境下存在多套环境的应用，经常遇到以下几个问题：
 如何管理不同环境或不同团队的应用的 Kubernetes YAML 资源 如何以某种方式管理不同环境的微小差异，使得资源配置可以复用，减少 copy and change 的工作量 如何简化维护应用的流程，不需要额外学习模板语法  Kustomize 通过以下几种方式解决了上述问题：
 kustomize 通过 Base &amp;amp; Overlays 方式 (下文会说明) 方式维护不同环境的应用配置 kustomize 使用 patch 方式复用 Base 配置，并在 Overlay 描述与 Base 应用配置的差异部分来实现资源复用 kustomize 管理的都是 Kubernetes 原生 YAML 文件，不需要学习额外的 DSL 语法  </description>
    </item>
    
    <item>
      <title>client-go</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/advanced/tool/client-go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/advanced/tool/client-go/</guid>
      <description>kubernetes/client-go #  安装 #  版本 #  v0.x.y #  Kubernetes releases &amp;gt;= v1.17.0
kubernetes-1.x.y #  Kubernetes releases &amp;lt; v1.17.0</description>
    </item>
    
  </channel>
</rss>
